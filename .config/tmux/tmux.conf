set-environment -g TMUX_SCRIPTS "$HOME/.config/tmux/scripts/"

set -g default-terminal "tmux-256color"
set -a terminal-overrides ",alacritty:RGB"

# general options
set  -g prefix S-F3           # fake prefix (some command don't work without a prefix)
set  -g base-index 1          # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows
setw -g automatic-rename on   # rename window to reflect current program
set  -g renumber-windows on   # renumber windows when a window is closed
set  -g escape-time 0         # no delay esc
set  -g history-limit 5000    # busted history
set  -g detach-on-destroy off # prevent detach on last panel is closed but there are other sessions
set  -g status-interval 0     # faster panel update
set  -g automatic-rename-format "#{?#{==:#{pane_current_command},#{b:SHELL}},ï„• #{b:pane_current_path},#{?#{==:#{pane_current_command},nvim},î˜« #{b:pane_current_path},#{pane_current_command}}}"
# aliases
set -s command-alias[101] vsplit='split -h'
set -s command-alias[102] vs='split -h'
set -s command-alias[103] cd="attach-session -t . -c '#{pane_current_path}'"

# unbind some defaults
unbind n # next-window
unbind p # previous-window
unbind s # choose-tree

# prefix tricky
bind -n S-F1 switch-client -T prefix \; display-message -d 0 "#{E:status-format[0]}"

# reload configuration
bind r source-file $HOME/.config/tmux/tmux.conf \; display 'tmux.conf sourced'

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history

# sessions
bind C-c new-session -c $HOME # create session
bind BTab switch-client -l    # move to last session

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right

# pane resize and split
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2
bind v copy-mode

bind s display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P \
  "Horizontal Split" h { split-window -h -c "#{pane_current_path}" } \
  "Vertical Split" v { split-window -v -c "#{pane_current_path}" } \
  '' \
  "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } \
  "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } \
  "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } \
  '' \
  "#{?pane_marked,Unmark,Mark}" m { select-pane -m } \
  "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z }

bind x display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P \
  "Kill Pane" X { kill-pane } \
  "Kill #{pane_current_command}" k { run 'pgrep -P #{pane_pid} --newest #{pane_current_command} | xargs kill' } \
  Respawn R { respawn-pane -k }

bind o display-menu -T "open" -x C -y C \
  "nvim plugins" n { display-popup -w 50 -h 15 -E '#{TMUX_SCRIPTS}/editor $HOME/.local/share/nvim/lazy/' } \
  "ruby gems" r { display-popup -w 50 -h 15 -E '#{TMUX_SCRIPTS}/editor $(gem environment gemdir)/gems' } \
  "manuals" m { display-popup -w 50 -h 15 -E 'apropos . | cut -f1 -d" " | fzf | xargs -I %s tmux new-window -c $HOME -n "ðŸ“š %s" "man %s" ' } \
  "tmux conf" e { new-window -c $DOTFILES_PATH '${EDITOR:-nvim} -c "Telescope find_files"' }

# window
# bind -r C-h previous-window # select previous window
# bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window
bind . command-prompt -1 -p "(smart-move-window)" "run 'sh #{TMUX_SCRIPTS}/move-window %%'"

# buffers
bind b list-buffers     # list paste buffers
bind p paste-buffer -p  # paste from the top paste buffer
bind P choose-buffer    # choose which buffer to paste from

# copy mode
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X begin-selection \; send -X rectangle-toggle
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi y send -X copy-selection-and-cancel

#
bind ` list-keys -N
bind Enter new-window -S -n "ï‰¦ iki" -c "$CLOUD_DIR/wiki" '${EDITOR:-vim} -c "Telescope find_files"'
bind g new-window -n "lazygit" -c "#{pane_current_path}" lazygit
bind f run-shell "tmux display-popup -w 50 -h 15 -E '#{TMUX_SCRIPTS}/sessionizer $HOME/Repos/'" # run-shell because display-popup do not accepts FORMATS
bind w choose-tree -Zs -K "#{e|+:#{line},1}"
bind m display-popup -E "spt" # spotify cli
bind ? split-window -l 40% "aichat"

# plugins
set-environment -g TMUX_PLUGIN_MANAGER_PATH $HOME/.tmux/plugins

# install tpm if not installed
if-shell '[[ ! -d #{TMUX_PLUGIN_MANAGER_PATH} ]]' {
  run-shell "git clone https://github.com/tmux-plugins/tpm #{TMUX_PLUGIN_MANAGER_PATH}/tpm"
}

set -g @plugin 'tmux-plugins/tpm'

# vimium like selection
set -g @plugin 'Morantron/tmux-fingers'
set -g @fingers-key Space
set -g @fingers-main-action :paste:
set -g @fingers-shift-action :copy:

set -g @plugin 'catppuccin/tmux'
set -g @catppuccin_flavour 'macchiato' # latte, frappe, macchiato, mocha
set -g @catppuccin_status_modules_right "directory session"
set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text "#W"
set -g @catppuccin_window_current_text "#W"
set -g @catppuccin_directory_text "#{=/-25/â€¦:pane_current_path}"
set -g @catppuccin_status_fill "all"
set -g @catppuccin_status_left_separator "î‚ºâ–ˆ"
set -g @catppuccin_status_right_separator "â–ˆî‚¼"
run-shell "#{TMUX_PLUGIN_MANAGER_PATH}/tpm/tpm"

# this needs to be after the plugin manager, otherwise catppuccin will override it
set -g status off
set -g message-style "#{E:window-status-style}"
